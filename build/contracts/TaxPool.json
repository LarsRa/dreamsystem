{
  "contractName": "TaxPool",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_govAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "dreamToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "government",
      "outputs": [
        {
          "internalType": "contract DreamGovernment",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectTaxesForLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTaxes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.5+commit.a4f2e591\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_govAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"collectTaxesForLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dreamToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"government\",\"outputs\":[{\"internalType\":\"contract DreamGovernment\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Lars Raschke\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_govAddress\":\"The address of the government contract\",\"_tokenAddress\":\"The address of the token contract\"}},\"getLotteryAmount()\":{\"returns\":{\"_0\":\"current lottery amount\"}},\"getTotalTaxes()\":{\"returns\":{\"_0\":\"current balance of tax pool\"}}},\"title\":\"Tax pool for Dream Government\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectTaxesForLottery()\":{\"notice\":\"Sending voted proportion of the tax pool to lottery contract\"},\"constructor\":{\"notice\":\"Setting references for government and dream token contracts\"},\"getLotteryAmount()\":{\"notice\":\"Calculating total amount of lottery with currently voted proportion\"},\"getTotalTaxes()\":{\"notice\":\"Get current amount of DreamToken in tax pool \"}},\"notice\":\"This pool collects all fees by a simple transfer on dream token. On the end of each government cycle the government sends an amount voted by the stakers to the lottery pool.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/TaxPool.sol\":\"TaxPool\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/DreamGovernment.sol\":{\"keccak256\":\"0x0df868aefdfdc0042ae6567998a90a99c10d775096d6b5efc213c56d09181145\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4fbf62940a3ea2dfe93b48594cdd791ffaa44f1856395ce54ab1c1fc487df8f7\",\"dweb:/ipfs/QmQxhQA8vU1jC4tq1297P5dtSWvRs6BZ6g27ztV7pb7LtP\"]},\"/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/DreamToken.sol\":{\"keccak256\":\"0x1ed5f286a1dca596eb9286891f30c1cfe4563c5af25e110bf3ed302338dcb2a9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f1a10c41f102395e24f88c04bce5b301cf707a3d3f5ccfb516c649abf760b6cc\",\"dweb:/ipfs/QmdXH754sCeTWtTB8e1oZPSQnbyY33EaeFAgZKTfBf8PEV\"]},\"/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/TaxPool.sol\":{\"keccak256\":\"0x0f908efb51bf326473518cc7fddae87a0376abecb7d7fb666b1cc1ec6e115cb9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://290ab1ba7de40a24e610bb82b4f6b90b617aff9f99512103e38bcfe7d6dda50f\",\"dweb:/ipfs/QmagNNsRGBp8XRWD9uvvR7HCduebZTqVkbzh48RqBu5GKJ\"]},\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5ff16b336ce8f906478d5f2eecc6435e00833bdc0b92f6b209cf9e92cb5b2b7\",\"dweb:/ipfs/QmRD1rAZEqQ73C33cdA3QoUyBDMEWnNKNMc6PNkAZWHeQQ\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xfeccdcbf67b2006a715e5af1a4c7556004d95b2806552b5cc54e46e8eb7e887b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45b1f9043c0fb450272f20ed19ef633fcba1b129d602651a856dfae1a2243a2c\",\"dweb:/ipfs/QmUTSQiDikkcNtTtyDpkEwCM5ztVUUh9c1inBukn6HC5Vr\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9ec48567e7ad06acb670980d5cdf3fd7f3949bf12894f02d68c3bb43e75aa84f\",\"dweb:/ipfs/QmaG3R2J9cz92YT77vFjYrjMNU2wHp4ypwYD62HqDUqS5U\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d4c3df1a7ca104b633a7d81c6c6f5192367d150cd5a32cba81f7f27012729013\",\"dweb:/ipfs/QmSim72e3ZVsfgZt8UceCvbiSuMRHR6WDsiamqNzZahGSY\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc2bfdea0d2562c76fb3c4cf70a86c6ba25c5a30e8f8515c95aafdf8383f8395\",\"dweb:/ipfs/QmTbFya18786ckJfLYUoWau9jBTKfmWnWm5XSViWvB7PXN\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f9529d3d365e8415155cee11394e0f7c0de2152b601b7e77508fce16cb4a509\",\"dweb:/ipfs/QmVhbcLVsAzvqfjsdLwy25XMjgVJm7Z3w2JCNiNbZF2GHT\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105ed3803806105ed83398101604081905261002f9161007c565b60008054600160a060020a03938416600160a060020a031991821617909155600180549290931691161790556100af565b8051600160a060020a038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b61052f806100be6000396000f3fe608060405234801561001057600080fd5b506004361061005a5760e060020a600035046309d655e9811461005f5780632672f5261461007a57806341c1f5b4146100a5578063a537e19d146100b8578063a90b0f47146100c0575b600080fd5b6100676100ca565b6040519081526020015b60405180910390f35b60005461008d90600160a060020a031681565b604051600160a060020a039091168152602001610071565b60015461008d90600160a060020a031681565b610067610164565b6100c861020d565b005b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091600160a060020a0316906370a082319060240160206040518083038186803b15801561012757600080fd5b505afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f919061043c565b905090565b600061015f61271061020760008054906101000a9004600160a060020a0316600160a060020a031663b627a4146040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156101be57600080fd5b505afa1580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f69190610455565b60ff166102016100ca565b906103d2565b906103e5565b600054600160a060020a031633146102ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f6e6c7920676f7665726e6d656e742063616e2063616c6c207468697320667560448201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600154600054604080517ffc7d91780000000000000000000000000000000000000000000000000000000081529051600160a060020a039384169363a9059cbb93169163fc7d9178916004808301926020929190829003018186803b15801561031357600080fd5b505afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b91906103f1565b610353610164565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf919061041a565b50565b60006103de82846104b3565b9392505050565b60006103de8284610478565b60006020828403121561040357600080fd5b8151600160a060020a03811681146103de57600080fd5b60006020828403121561042c57600080fd5b815180151581146103de57600080fd5b60006020828403121561044e57600080fd5b5051919050565b60006020828403121561046757600080fd5b815160ff811681146103de57600080fd5b6000826104ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160001904831182151516156104f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50029056fea2646970667358221220a6fed44b8f718aee77c8652e1d37e93adac4ee3a39d57c26c97ef2236399191c64736f6c63430008050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061005a5760e060020a600035046309d655e9811461005f5780632672f5261461007a57806341c1f5b4146100a5578063a537e19d146100b8578063a90b0f47146100c0575b600080fd5b6100676100ca565b6040519081526020015b60405180910390f35b60005461008d90600160a060020a031681565b604051600160a060020a039091168152602001610071565b60015461008d90600160a060020a031681565b610067610164565b6100c861020d565b005b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600091600160a060020a0316906370a082319060240160206040518083038186803b15801561012757600080fd5b505afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f919061043c565b905090565b600061015f61271061020760008054906101000a9004600160a060020a0316600160a060020a031663b627a4146040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156101be57600080fd5b505afa1580156101d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f69190610455565b60ff166102016100ca565b906103d2565b906103e5565b600054600160a060020a031633146102ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f4f6e6c7920676f7665726e6d656e742063616e2063616c6c207468697320667560448201527f6e6374696f6e2e00000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b600154600054604080517ffc7d91780000000000000000000000000000000000000000000000000000000081529051600160a060020a039384169363a9059cbb93169163fc7d9178916004808301926020929190829003018186803b15801561031357600080fd5b505afa158015610327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034b91906103f1565b610353610164565b60405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15801561039757600080fd5b505af11580156103ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cf919061041a565b50565b60006103de82846104b3565b9392505050565b60006103de8284610478565b60006020828403121561040357600080fd5b8151600160a060020a03811681146103de57600080fd5b60006020828403121561042c57600080fd5b815180151581146103de57600080fd5b60006020828403121561044e57600080fd5b5051919050565b60006020828403121561046757600080fd5b815160ff811681146103de57600080fd5b6000826104ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008160001904831182151516156104f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50029056fea2646970667358221220a6fed44b8f718aee77c8652e1d37e93adac4ee3a39d57c26c97ef2236399191c64736f6c63430008050033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:491:9",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:9",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "74:117:9",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "84:22:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "99:6:9"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "93:5:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "93:13:9"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "84:5:9"
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "169:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "178:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "181:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "171:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "171:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "171:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "128:5:9"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "139:5:9"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "154:1:9",
                                        "type": "",
                                        "value": "2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "157:3:9",
                                        "type": "",
                                        "value": "160"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "exp",
                                      "nodeType": "YulIdentifier",
                                      "src": "150:3:9"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "150:11:9"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "163:1:9",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "146:3:9"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "146:19:9"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "135:3:9"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "135:31:9"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "125:2:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "125:42:9"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "118:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "118:50:9"
                  },
                  "nodeType": "YulIf",
                  "src": "115:2:9"
                }
              ]
            },
            "name": "abi_decode_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "53:6:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "64:5:9",
                "type": ""
              }
            ],
            "src": "14:177:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "294:195:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "340:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "349:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "352:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "342:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "342:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "342:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "315:7:9"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "324:9:9"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "311:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "311:23:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "336:2:9",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "307:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "307:32:9"
                  },
                  "nodeType": "YulIf",
                  "src": "304:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "365:50:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "405:9:9"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address_fromMemory",
                      "nodeType": "YulIdentifier",
                      "src": "375:29:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "375:40:9"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "365:6:9"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "424:59:9",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "468:9:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "479:2:9",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "464:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "464:18:9"
                      }
                    ],
                    "functionName": {
                      "name": "abi_decode_address_fromMemory",
                      "nodeType": "YulIdentifier",
                      "src": "434:29:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "434:49:9"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "424:6:9"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_addresst_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "252:9:9",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "263:7:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "275:6:9",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "283:6:9",
                "type": ""
              }
            ],
            "src": "196:293:9"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(exp(2, 160), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n    }\n}",
      "id": 9,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:3307:9",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:9",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "95:232:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "141:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "150:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "153:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "143:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "143:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "143:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "116:7:9"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "125:9:9"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "112:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "112:23:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "137:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "108:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "108:32:9"
                  },
                  "nodeType": "YulIf",
                  "src": "105:2:9"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "166:29:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "185:9:9"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "179:5:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "179:16:9"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "170:5:9",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "281:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "290:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "293:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "283:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "283:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "283:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "217:5:9"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "228:5:9"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "235:42:9",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "224:3:9"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "224:54:9"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "214:2:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "214:65:9"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "207:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "207:73:9"
                  },
                  "nodeType": "YulIf",
                  "src": "204:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "306:15:9",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "316:5:9"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "306:6:9"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "61:9:9",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "72:7:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "84:6:9",
                "type": ""
              }
            ],
            "src": "14:313:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "410:199:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "456:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "465:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "468:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "458:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "458:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "458:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "431:7:9"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "440:9:9"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "427:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "427:23:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "452:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "423:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "423:32:9"
                  },
                  "nodeType": "YulIf",
                  "src": "420:2:9"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "481:29:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "500:9:9"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "494:5:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "494:16:9"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "485:5:9",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "563:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "572:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "575:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "565:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "565:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "565:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "532:5:9"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "553:5:9"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "546:6:9"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "546:13:9"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "539:6:9"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "539:21:9"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "529:2:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "529:32:9"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "522:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "522:40:9"
                  },
                  "nodeType": "YulIf",
                  "src": "519:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "588:15:9",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "598:5:9"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "588:6:9"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bool_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "376:9:9",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "387:7:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "399:6:9",
                "type": ""
              }
            ],
            "src": "332:277:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "695:103:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "741:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "750:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "753:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "743:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "743:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "743:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "716:7:9"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "725:9:9"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "712:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "712:23:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "737:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "708:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "708:32:9"
                  },
                  "nodeType": "YulIf",
                  "src": "705:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "766:26:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "782:9:9"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "776:5:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "776:16:9"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "766:6:9"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint256_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "661:9:9",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "672:7:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "684:6:9",
                "type": ""
              }
            ],
            "src": "614:184:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "882:194:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "928:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "937:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "940:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "930:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "930:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "930:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "903:7:9"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "912:9:9"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "899:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "899:23:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "924:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "895:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "895:32:9"
                  },
                  "nodeType": "YulIf",
                  "src": "892:2:9"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "953:29:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "972:9:9"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "966:5:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "966:16:9"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "957:5:9",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1030:16:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1039:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1042:1:9",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1032:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1032:12:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1032:12:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1004:5:9"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1015:5:9"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1022:4:9",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1011:3:9"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1011:16:9"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1001:2:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1001:27:9"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "994:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "994:35:9"
                  },
                  "nodeType": "YulIf",
                  "src": "991:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "1055:15:9",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "1065:5:9"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "1055:6:9"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_uint8_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "848:9:9",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "859:7:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "871:6:9",
                "type": ""
              }
            ],
            "src": "803:273:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1182:125:9",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1192:26:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1204:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1215:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1200:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1200:18:9"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1192:4:9"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1234:9:9"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1249:6:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1257:42:9",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1245:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1245:55:9"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1227:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1227:74:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1227:74:9"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1151:9:9",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1162:6:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1173:4:9",
                "type": ""
              }
            ],
            "src": "1081:226:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1441:168:9",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1451:26:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1463:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1474:2:9",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1459:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1459:18:9"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1451:4:9"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1493:9:9"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1508:6:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1516:42:9",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1504:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1504:55:9"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1486:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1486:74:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1486:74:9"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "1580:9:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1591:2:9",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "1576:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1576:18:9"
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulIdentifier",
                        "src": "1596:6:9"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1569:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1569:34:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1569:34:9"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1402:9:9",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "1413:6:9",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1421:6:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1432:4:9",
                "type": ""
              }
            ],
            "src": "1312:297:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1738:125:9",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1748:26:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1760:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1771:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "1756:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1756:18:9"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1748:4:9"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "1790:9:9"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "1805:6:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "1813:42:9",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "1801:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1801:55:9"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "1783:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1783:74:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1783:74:9"
                }
              ]
            },
            "name": "abi_encode_tuple_t_contract$_DreamGovernment_$533__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1707:9:9",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1718:6:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1729:4:9",
                "type": ""
              }
            ],
            "src": "1614:249:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1984:125:9",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1994:26:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2006:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2017:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2002:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2002:18:9"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "1994:4:9"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2036:9:9"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value0",
                            "nodeType": "YulIdentifier",
                            "src": "2051:6:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2059:42:9",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          }
                        ],
                        "functionName": {
                          "name": "and",
                          "nodeType": "YulIdentifier",
                          "src": "2047:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2047:55:9"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2029:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2029:74:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2029:74:9"
                }
              ]
            },
            "name": "abi_encode_tuple_t_contract$_IERC20_$1479__to_t_address__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "1953:9:9",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "1964:6:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "1975:4:9",
                "type": ""
              }
            ],
            "src": "1868:241:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2288:229:9",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2305:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2316:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2298:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2298:21:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2298:21:9"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2339:9:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2350:2:9",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2335:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2335:18:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2355:2:9",
                        "type": "",
                        "value": "39"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2328:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2328:30:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2328:30:9"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2378:9:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2389:2:9",
                            "type": "",
                            "value": "64"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2374:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2374:18:9"
                      },
                      {
                        "hexValue": "4f6e6c7920676f7665726e6d656e742063616e2063616c6c2074686973206675",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "2394:34:9",
                        "type": "",
                        "value": "Only government can call this fu"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2367:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2367:62:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2367:62:9"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "2449:9:9"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2460:2:9",
                            "type": "",
                            "value": "96"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "2445:3:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "2445:18:9"
                      },
                      {
                        "hexValue": "6e6374696f6e2e",
                        "kind": "string",
                        "nodeType": "YulLiteral",
                        "src": "2465:9:9",
                        "type": "",
                        "value": "nction."
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2438:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2438:37:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2438:37:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2484:27:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2496:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2507:3:9",
                        "type": "",
                        "value": "128"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2492:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2492:19:9"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "2484:4:9"
                    }
                  ]
                }
              ]
            },
            "name": "abi_encode_tuple_t_stringliteral_443fc3f7a485c900dc40ec61c2314e9fbdc931281d0c6ea7396e236a90ac7277__to_t_string_memory_ptr__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "2265:9:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "2279:4:9",
                "type": ""
              }
            ],
            "src": "2114:403:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2623:76:9",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "2633:26:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2645:9:9"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "2656:2:9",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2641:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2641:18:9"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "2633:4:9"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "2675:9:9"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "2686:6:9"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "2668:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2668:25:9"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "2668:25:9"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "2592:9:9",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "2603:6:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "2614:4:9",
                "type": ""
              }
            ],
            "src": "2522:177:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "2750:228:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "2781:168:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2802:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2805:77:9",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "2795:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2795:88:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2795:88:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2903:1:9",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2906:4:9",
                              "type": "",
                              "value": "0x12"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "2896:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2896:15:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2896:15:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2931:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "2934:4:9",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "2924:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "2924:15:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "2924:15:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "2770:1:9"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "2763:6:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2763:9:9"
                  },
                  "nodeType": "YulIf",
                  "src": "2760:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "2958:14:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "2967:1:9"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "2970:1:9"
                      }
                    ],
                    "functionName": {
                      "name": "div",
                      "nodeType": "YulIdentifier",
                      "src": "2963:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2963:9:9"
                  },
                  "variableNames": [
                    {
                      "name": "r",
                      "nodeType": "YulIdentifier",
                      "src": "2958:1:9"
                    }
                  ]
                }
              ]
            },
            "name": "checked_div_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "2735:1:9",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "2738:1:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "r",
                "nodeType": "YulTypedName",
                "src": "2744:1:9",
                "type": ""
              }
            ],
            "src": "2704:274:9"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "3035:270:9",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "3102:168:9",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3123:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3126:77:9",
                              "type": "",
                              "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "3116:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "3116:88:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "3116:88:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3224:1:9",
                              "type": "",
                              "value": "4"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3227:4:9",
                              "type": "",
                              "value": "0x11"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nodeType": "YulIdentifier",
                            "src": "3217:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "3217:15:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "3217:15:9"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3252:1:9",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "3255:4:9",
                              "type": "",
                              "value": "0x24"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "3245:6:9"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "3245:15:9"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "3245:15:9"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3066:1:9"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3059:6:9"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3059:9:9"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "3052:6:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3052:17:9"
                      },
                      {
                        "arguments": [
                          {
                            "name": "y",
                            "nodeType": "YulIdentifier",
                            "src": "3074:1:9"
                          },
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3085:1:9",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "3081:3:9"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3081:6:9"
                              },
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3089:1:9"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "3077:3:9"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3077:14:9"
                          }
                        ],
                        "functionName": {
                          "name": "gt",
                          "nodeType": "YulIdentifier",
                          "src": "3071:2:9"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "3071:21:9"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "3048:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3048:45:9"
                  },
                  "nodeType": "YulIf",
                  "src": "3045:2:9"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "3279:20:9",
                  "value": {
                    "arguments": [
                      {
                        "name": "x",
                        "nodeType": "YulIdentifier",
                        "src": "3294:1:9"
                      },
                      {
                        "name": "y",
                        "nodeType": "YulIdentifier",
                        "src": "3297:1:9"
                      }
                    ],
                    "functionName": {
                      "name": "mul",
                      "nodeType": "YulIdentifier",
                      "src": "3290:3:9"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "3290:9:9"
                  },
                  "variableNames": [
                    {
                      "name": "product",
                      "nodeType": "YulIdentifier",
                      "src": "3279:7:9"
                    }
                  ]
                }
              ]
            },
            "name": "checked_mul_t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "x",
                "nodeType": "YulTypedName",
                "src": "3014:1:9",
                "type": ""
              },
              {
                "name": "y",
                "nodeType": "YulTypedName",
                "src": "3017:1:9",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "product",
                "nodeType": "YulTypedName",
                "src": "3023:7:9",
                "type": ""
              }
            ],
            "src": "2983:322:9"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint8_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_contract$_DreamGovernment_$533__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$1479__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_443fc3f7a485c900dc40ec61c2314e9fbdc931281d0c6ea7396e236a90ac7277__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Only government can call this fu\")\n        mstore(add(headStart, 96), \"nction.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x)))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        product := mul(x, y)\n    }\n}",
      "id": 9,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "476:1579:2:-:0;;;1142:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1209:10;:41;;-1:-1:-1;;;;;1209:41:2;;;-1:-1:-1;;;;;;1209:41:2;;;;;;;;1261:34;;;;;;;;;;;476:1579;;14:177:9;93:13;;-1:-1:-1;;;;;135:31:9;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:2;;;352:1;349;342:12;304:2;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;294:195;;;;;:::o;:::-;476:1579:2;;;;;;",
  "deployedSourceMap": "476:1579:2:-:0;;;;;;;;;;;;;;;;;;-1:-1:-1;;;476:1579:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1660:114;;;:::i;:::-;;;2668:25:9;;;2656:2;2641:18;1660:114:2;;;;;;;;539:33;;;;;-1:-1:-1;;;;;539:33:2;;;;;;-1:-1:-1;;;;;1245:55:9;;;1227:74;;1215:2;1200:18;539:33:2;1182:125:9;603:24:2;;;;;-1:-1:-1;;;;;603:24:2;;;1911:141;;;:::i;1393:147::-;;;:::i;:::-;;1660:114;1731:10;;:35;;;;;1760:4;1731:35;;;1227:74:9;1705:7:2;;-1:-1:-1;;;;;1731:10:2;;:20;;1200:18:9;;1731:35:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1724:42;;1660:114;:::o;1911:141::-;1959:7;1985:59;2038:5;1985:48;2005:10;;;;;;;;-1:-1:-1;;;;;2005:10:2;-1:-1:-1;;;;;2005:25:2;;:27;;;;;-1:-1:-1;;;2005:27:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1985:48;;:15;:13;:15::i;:::-;:19;;:48::i;:::-;:52;;:59::i;1393:147::-;824:10;;-1:-1:-1;;;;;824:10:2;802;:33;780:122;;;;;;;2316:2:9;780:122:2;;;2298:21:9;2355:2;2335:18;;;2328:30;2394:34;2374:18;;;2367:62;2465:9;2445:18;;;2438:37;2492:19;;780:122:2;;;;;;;;1461:10:::1;::::0;::::1;1481::::0;:30:::1;::::0;;;;;;;-1:-1:-1;;;;;1461:10:2;;::::1;::::0;:19:::1;::::0;1481:10:::1;::::0;:28:::1;::::0;:30:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;:10;:30;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1513:18;:16;:18::i;:::-;1461:71;::::0;-1:-1:-1;;;1461:71:2::1;::::0;::::1;;::::0;;-1:-1:-1;;;;;1504:55:9;;;1461:71:2::1;::::0;::::1;1486:74:9::0;1576:18;;;1569:34;1459:18;;1461:71:2::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1393:147::o:0;3382:96:8:-;3440:7;3466:5;3470:1;3466;:5;:::i;:::-;3459:12;3382:96;-1:-1:-1;;;3382:96:8:o;3767:::-;3825:7;3851:5;3855:1;3851;:5;:::i;14:313:9:-;84:6;137:2;125:9;116:7;112:23;108:32;105:2;;;153:1;150;143:12;105:2;185:9;179:16;-1:-1:-1;;;;;228:5:9;224:54;217:5;214:65;204:2;;293:1;290;283:12;332:277;399:6;452:2;440:9;431:7;427:23;423:32;420:2;;;468:1;465;458:12;420:2;500:9;494:16;553:5;546:13;539:21;532:5;529:32;519:2;;575:1;572;565:12;614:184;684:6;737:2;725:9;716:7;712:23;708:32;705:2;;;753:1;750;743:12;705:2;-1:-1:-1;776:16:9;;695:103;-1:-1:-1;695:103:9:o;803:273::-;871:6;924:2;912:9;903:7;899:23;895:32;892:2;;;940:1;937;930:12;892:2;972:9;966:16;1022:4;1015:5;1011:16;1004:5;1001:27;991:2;;1042:1;1039;1032:12;2704:274;2744:1;2770;2760:2;;2805:77;2802:1;2795:88;2906:4;2903:1;2896:15;2934:4;2931:1;2924:15;2760:2;-1:-1:-1;2963:9:9;;2750:228::o;2983:322::-;3023:7;3089:1;3085;3081:6;3077:14;3074:1;3071:21;3066:1;3059:9;3052:17;3048:45;3045:2;;;3126:77;3123:1;3116:88;3227:4;3224:1;3217:15;3255:4;3252:1;3245:15;3045:2;-1:-1:-1;3290:9:9;;3035:270::o",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.5;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./DreamGovernment.sol\";\r\n\r\n/// @title Tax pool for Dream Government\r\n/// @author Lars Raschke\r\n/// @notice This pool collects all fees by a simple transfer on dream token.\r\n/// On the end of each government cycle the government sends an amount voted by the\r\n/// stakers to the lottery pool.\r\ncontract TaxPool {\r\n    using SafeMath for uint256;\r\n    \r\n    DreamGovernment public government; // government contract \r\n    IERC20 public dreamToken;          //erc20 dreamtoken contract\r\n    \r\n    // modifier to restrict functions access only for government\r\n    modifier onlyGovernment() {\r\n        require(\r\n            msg.sender == address(government),\r\n            \"Only government can call this function.\"\r\n        );\r\n        _;\r\n    }\r\n    \r\n    /// @notice Setting references for government and dream token contracts\r\n    /// @param _govAddress The address of the government contract\r\n    /// @param _tokenAddress The address of the token contract\r\n    constructor(address _govAddress, address _tokenAddress) {\r\n        government = DreamGovernment(_govAddress);\r\n        dreamToken = IERC20(_tokenAddress);\r\n    }\r\n    \r\n    /// @notice Sending voted proportion of the tax pool to lottery contract\r\n    function collectTaxesForLottery() external onlyGovernment{\r\n        dreamToken.transfer(government.getLotteryAddress(), getLotteryAmount());\r\n    }\r\n    \r\n    /// @notice Get current amount of DreamToken in tax pool \r\n    /// @return current balance of tax pool\r\n    function getTotalTaxes() public view returns(uint256){\r\n        return dreamToken.balanceOf(address(this));\r\n    }\r\n    \r\n    /// @notice Calculating total amount of lottery with currently voted proportion\r\n    /// @return current lottery amount\r\n    function getLotteryAmount() public view returns(uint256){\r\n        return getTotalTaxes().mul(government.getLotteryRate()).div(10000);\r\n    }\r\n}",
  "sourcePath": "C:\\Users\\larsr\\Documents\\fh\\Bewerbung\\DreamGov\\contracts\\TaxPool.sol",
  "ast": {
    "absolutePath": "/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/TaxPool.sol",
    "exportedSymbols": {
      "DreamGovernment": [
        533
      ],
      "IERC20": [
        1479
      ],
      "SafeMath": [
        1839
      ],
      "TaxPool": [
        784
      ]
    },
    "id": 785,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 684,
        "literals": [
          "solidity",
          "0.8",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:22:2"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 685,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 785,
        "sourceUnit": 1480,
        "src": "59:56:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 686,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 785,
        "sourceUnit": 1840,
        "src": "117:57:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/DreamGovernment.sol",
        "file": "./DreamGovernment.sol",
        "id": 687,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 785,
        "sourceUnit": 534,
        "src": "176:31:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 688,
          "nodeType": "StructuredDocumentation",
          "src": "211:265:2",
          "text": "@title Tax pool for Dream Government\n @author Lars Raschke\n @notice This pool collects all fees by a simple transfer on dream token.\n On the end of each government cycle the government sends an amount voted by the\n stakers to the lottery pool."
        },
        "fullyImplemented": true,
        "id": 784,
        "linearizedBaseContracts": [
          784
        ],
        "name": "TaxPool",
        "nameLocation": "485:7:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 691,
            "libraryName": {
              "id": 689,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1839,
              "src": "506:8:2"
            },
            "nodeType": "UsingForDirective",
            "src": "500:27:2",
            "typeName": {
              "id": 690,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "519:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "2672f526",
            "id": 694,
            "mutability": "mutable",
            "name": "government",
            "nameLocation": "562:10:2",
            "nodeType": "VariableDeclaration",
            "scope": 784,
            "src": "539:33:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_DreamGovernment_$533",
              "typeString": "contract DreamGovernment"
            },
            "typeName": {
              "id": 693,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 692,
                "name": "DreamGovernment",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 533,
                "src": "539:15:2"
              },
              "referencedDeclaration": 533,
              "src": "539:15:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DreamGovernment_$533",
                "typeString": "contract DreamGovernment"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "41c1f5b4",
            "id": 697,
            "mutability": "mutable",
            "name": "dreamToken",
            "nameLocation": "617:10:2",
            "nodeType": "VariableDeclaration",
            "scope": 784,
            "src": "603:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC20_$1479",
              "typeString": "contract IERC20"
            },
            "typeName": {
              "id": 696,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 695,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1479,
                "src": "603:6:2"
              },
              "referencedDeclaration": 1479,
              "src": "603:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$1479",
                "typeString": "contract IERC20"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 711,
              "nodeType": "Block",
              "src": "769:153:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 700,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "802:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "802:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 704,
                              "name": "government",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "824:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_DreamGovernment_$533",
                                "typeString": "contract DreamGovernment"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_DreamGovernment_$533",
                                "typeString": "contract DreamGovernment"
                              }
                            ],
                            "id": 703,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "816:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 702,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "816:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 705,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "816:19:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "802:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c7920676f7665726e6d656e742063616e2063616c6c20746869732066756e6374696f6e2e",
                        "id": 707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "850:41:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_443fc3f7a485c900dc40ec61c2314e9fbdc931281d0c6ea7396e236a90ac7277",
                          "typeString": "literal_string \"Only government can call this function.\""
                        },
                        "value": "Only government can call this function."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_443fc3f7a485c900dc40ec61c2314e9fbdc931281d0c6ea7396e236a90ac7277",
                          "typeString": "literal_string \"Only government can call this function.\""
                        }
                      ],
                      "id": 699,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "780:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 708,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "780:122:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 709,
                  "nodeType": "ExpressionStatement",
                  "src": "780:122:2"
                },
                {
                  "id": 710,
                  "nodeType": "PlaceholderStatement",
                  "src": "913:1:2"
                }
              ]
            },
            "id": 712,
            "name": "onlyGovernment",
            "nameLocation": "752:14:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 698,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "766:2:2"
            },
            "src": "743:179:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 732,
              "nodeType": "Block",
              "src": "1198:105:2",
              "statements": [
                {
                  "expression": {
                    "id": 724,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 720,
                      "name": "government",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 694,
                      "src": "1209:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_DreamGovernment_$533",
                        "typeString": "contract DreamGovernment"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 722,
                          "name": "_govAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 715,
                          "src": "1238:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 721,
                        "name": "DreamGovernment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 533,
                        "src": "1222:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DreamGovernment_$533_$",
                          "typeString": "type(contract DreamGovernment)"
                        }
                      },
                      "id": 723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1222:28:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_DreamGovernment_$533",
                        "typeString": "contract DreamGovernment"
                      }
                    },
                    "src": "1209:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_DreamGovernment_$533",
                      "typeString": "contract DreamGovernment"
                    }
                  },
                  "id": 725,
                  "nodeType": "ExpressionStatement",
                  "src": "1209:41:2"
                },
                {
                  "expression": {
                    "id": 730,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 726,
                      "name": "dreamToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 697,
                      "src": "1261:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1479",
                        "typeString": "contract IERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 728,
                          "name": "_tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 717,
                          "src": "1281:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 727,
                        "name": "IERC20",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1479,
                        "src": "1274:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IERC20_$1479_$",
                          "typeString": "type(contract IERC20)"
                        }
                      },
                      "id": 729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1274:21:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1479",
                        "typeString": "contract IERC20"
                      }
                    },
                    "src": "1261:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1479",
                      "typeString": "contract IERC20"
                    }
                  },
                  "id": 731,
                  "nodeType": "ExpressionStatement",
                  "src": "1261:34:2"
                }
              ]
            },
            "documentation": {
              "id": 713,
              "nodeType": "StructuredDocumentation",
              "src": "934:202:2",
              "text": "@notice Setting references for government and dream token contracts\n @param _govAddress The address of the government contract\n @param _tokenAddress The address of the token contract"
            },
            "id": 733,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 718,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 715,
                  "mutability": "mutable",
                  "name": "_govAddress",
                  "nameLocation": "1162:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 733,
                  "src": "1154:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 714,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1154:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 717,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "1183:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 733,
                  "src": "1175:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 716,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1175:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1153:44:2"
            },
            "returnParameters": {
              "id": 719,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1198:0:2"
            },
            "scope": 784,
            "src": "1142:161:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 749,
              "nodeType": "Block",
              "src": "1450:90:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 742,
                            "name": "government",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 694,
                            "src": "1481:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DreamGovernment_$533",
                              "typeString": "contract DreamGovernment"
                            }
                          },
                          "id": 743,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "getLotteryAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 532,
                          "src": "1481:28:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$__$returns$_t_address_$",
                            "typeString": "function () pure external returns (address)"
                          }
                        },
                        "id": 744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1481:30:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 745,
                          "name": "getLotteryAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 783,
                          "src": "1513:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 746,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1513:18:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 739,
                        "name": "dreamToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "1461:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1479",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 741,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1428,
                      "src": "1461:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 747,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1461:71:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 748,
                  "nodeType": "ExpressionStatement",
                  "src": "1461:71:2"
                }
              ]
            },
            "documentation": {
              "id": 734,
              "nodeType": "StructuredDocumentation",
              "src": "1315:72:2",
              "text": "@notice Sending voted proportion of the tax pool to lottery contract"
            },
            "functionSelector": "a90b0f47",
            "id": 750,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 737,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 736,
                  "name": "onlyGovernment",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 712,
                  "src": "1436:14:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1436:14:2"
              }
            ],
            "name": "collectTaxesForLottery",
            "nameLocation": "1402:22:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1424:2:2"
            },
            "returnParameters": {
              "id": 738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1450:0:2"
            },
            "scope": 784,
            "src": "1393:147:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 764,
              "nodeType": "Block",
              "src": "1713:61:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 760,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967268,
                            "src": "1760:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TaxPool_$784",
                              "typeString": "contract TaxPool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TaxPool_$784",
                              "typeString": "contract TaxPool"
                            }
                          ],
                          "id": 759,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1752:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 758,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1752:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 761,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1752:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 756,
                        "name": "dreamToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "1731:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1479",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1418,
                      "src": "1731:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 762,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1731:35:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 755,
                  "id": 763,
                  "nodeType": "Return",
                  "src": "1724:42:2"
                }
              ]
            },
            "documentation": {
              "id": 751,
              "nodeType": "StructuredDocumentation",
              "src": "1552:102:2",
              "text": "@notice Get current amount of DreamToken in tax pool \n @return current balance of tax pool"
            },
            "functionSelector": "09d655e9",
            "id": 765,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTotalTaxes",
            "nameLocation": "1669:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 752,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1682:2:2"
            },
            "returnParameters": {
              "id": 755,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 754,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 765,
                  "src": "1705:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 753,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1705:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1704:9:2"
            },
            "scope": 784,
            "src": "1660:114:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 782,
              "nodeType": "Block",
              "src": "1967:85:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "3130303030",
                        "id": 779,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2038:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10000_by_1",
                          "typeString": "int_const 10000"
                        },
                        "value": "10000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_10000_by_1",
                          "typeString": "int_const 10000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 774,
                                "name": "government",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 694,
                                "src": "2005:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_DreamGovernment_$533",
                                  "typeString": "contract DreamGovernment"
                                }
                              },
                              "id": 775,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getLotteryRate",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 520,
                              "src": "2005:25:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                "typeString": "function () view external returns (uint8)"
                              }
                            },
                            "id": 776,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2005:27:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          ],
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 771,
                              "name": "getTotalTaxes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "1985:13:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                "typeString": "function () view returns (uint256)"
                              }
                            },
                            "id": 772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1985:15:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1733,
                          "src": "1985:19:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1985:48:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 778,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1748,
                      "src": "1985:52:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1985:59:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 770,
                  "id": 781,
                  "nodeType": "Return",
                  "src": "1978:66:2"
                }
              ]
            },
            "documentation": {
              "id": 766,
              "nodeType": "StructuredDocumentation",
              "src": "1786:119:2",
              "text": "@notice Calculating total amount of lottery with currently voted proportion\n @return current lottery amount"
            },
            "functionSelector": "a537e19d",
            "id": 783,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getLotteryAmount",
            "nameLocation": "1920:16:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1936:2:2"
            },
            "returnParameters": {
              "id": 770,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 769,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 783,
                  "src": "1959:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 768,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1959:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1958:9:2"
            },
            "scope": 784,
            "src": "1911:141:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 785,
        "src": "476:1579:2",
        "usedErrors": []
      }
    ],
    "src": "33:2022:2"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/TaxPool.sol",
    "exportedSymbols": {
      "DreamGovernment": [
        533
      ],
      "IERC20": [
        1479
      ],
      "SafeMath": [
        1839
      ],
      "TaxPool": [
        784
      ]
    },
    "id": 785,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 684,
        "literals": [
          "solidity",
          "0.8",
          ".5"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:22:2"
      },
      {
        "absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
        "id": 685,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 785,
        "sourceUnit": 1480,
        "src": "59:56:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
        "id": 686,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 785,
        "sourceUnit": 1840,
        "src": "117:57:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/C/Users/larsr/Documents/fh/Bewerbung/DreamGov/contracts/DreamGovernment.sol",
        "file": "./DreamGovernment.sol",
        "id": 687,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 785,
        "sourceUnit": 534,
        "src": "176:31:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 688,
          "nodeType": "StructuredDocumentation",
          "src": "211:265:2",
          "text": "@title Tax pool for Dream Government\n @author Lars Raschke\n @notice This pool collects all fees by a simple transfer on dream token.\n On the end of each government cycle the government sends an amount voted by the\n stakers to the lottery pool."
        },
        "fullyImplemented": true,
        "id": 784,
        "linearizedBaseContracts": [
          784
        ],
        "name": "TaxPool",
        "nameLocation": "485:7:2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 691,
            "libraryName": {
              "id": 689,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1839,
              "src": "506:8:2"
            },
            "nodeType": "UsingForDirective",
            "src": "500:27:2",
            "typeName": {
              "id": 690,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "519:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "constant": false,
            "functionSelector": "2672f526",
            "id": 694,
            "mutability": "mutable",
            "name": "government",
            "nameLocation": "562:10:2",
            "nodeType": "VariableDeclaration",
            "scope": 784,
            "src": "539:33:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_DreamGovernment_$533",
              "typeString": "contract DreamGovernment"
            },
            "typeName": {
              "id": 693,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 692,
                "name": "DreamGovernment",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 533,
                "src": "539:15:2"
              },
              "referencedDeclaration": 533,
              "src": "539:15:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_DreamGovernment_$533",
                "typeString": "contract DreamGovernment"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "41c1f5b4",
            "id": 697,
            "mutability": "mutable",
            "name": "dreamToken",
            "nameLocation": "617:10:2",
            "nodeType": "VariableDeclaration",
            "scope": 784,
            "src": "603:24:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IERC20_$1479",
              "typeString": "contract IERC20"
            },
            "typeName": {
              "id": 696,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 695,
                "name": "IERC20",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1479,
                "src": "603:6:2"
              },
              "referencedDeclaration": 1479,
              "src": "603:6:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC20_$1479",
                "typeString": "contract IERC20"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 711,
              "nodeType": "Block",
              "src": "769:153:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 700,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "802:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 701,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "802:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 704,
                              "name": "government",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 694,
                              "src": "824:10:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_DreamGovernment_$533",
                                "typeString": "contract DreamGovernment"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_DreamGovernment_$533",
                                "typeString": "contract DreamGovernment"
                              }
                            ],
                            "id": 703,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "816:7:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 702,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "816:7:2",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 705,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "816:19:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "802:33:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c7920676f7665726e6d656e742063616e2063616c6c20746869732066756e6374696f6e2e",
                        "id": 707,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "850:41:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_443fc3f7a485c900dc40ec61c2314e9fbdc931281d0c6ea7396e236a90ac7277",
                          "typeString": "literal_string \"Only government can call this function.\""
                        },
                        "value": "Only government can call this function."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_443fc3f7a485c900dc40ec61c2314e9fbdc931281d0c6ea7396e236a90ac7277",
                          "typeString": "literal_string \"Only government can call this function.\""
                        }
                      ],
                      "id": 699,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4294967278,
                        4294967278
                      ],
                      "referencedDeclaration": 4294967278,
                      "src": "780:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 708,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "780:122:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 709,
                  "nodeType": "ExpressionStatement",
                  "src": "780:122:2"
                },
                {
                  "id": 710,
                  "nodeType": "PlaceholderStatement",
                  "src": "913:1:2"
                }
              ]
            },
            "id": 712,
            "name": "onlyGovernment",
            "nameLocation": "752:14:2",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 698,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "766:2:2"
            },
            "src": "743:179:2",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 732,
              "nodeType": "Block",
              "src": "1198:105:2",
              "statements": [
                {
                  "expression": {
                    "id": 724,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 720,
                      "name": "government",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 694,
                      "src": "1209:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_DreamGovernment_$533",
                        "typeString": "contract DreamGovernment"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 722,
                          "name": "_govAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 715,
                          "src": "1238:11:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 721,
                        "name": "DreamGovernment",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 533,
                        "src": "1222:15:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_DreamGovernment_$533_$",
                          "typeString": "type(contract DreamGovernment)"
                        }
                      },
                      "id": 723,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1222:28:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_DreamGovernment_$533",
                        "typeString": "contract DreamGovernment"
                      }
                    },
                    "src": "1209:41:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_DreamGovernment_$533",
                      "typeString": "contract DreamGovernment"
                    }
                  },
                  "id": 725,
                  "nodeType": "ExpressionStatement",
                  "src": "1209:41:2"
                },
                {
                  "expression": {
                    "id": 730,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 726,
                      "name": "dreamToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 697,
                      "src": "1261:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1479",
                        "typeString": "contract IERC20"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 728,
                          "name": "_tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 717,
                          "src": "1281:13:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 727,
                        "name": "IERC20",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1479,
                        "src": "1274:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IERC20_$1479_$",
                          "typeString": "type(contract IERC20)"
                        }
                      },
                      "id": 729,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1274:21:2",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC20_$1479",
                        "typeString": "contract IERC20"
                      }
                    },
                    "src": "1261:34:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$1479",
                      "typeString": "contract IERC20"
                    }
                  },
                  "id": 731,
                  "nodeType": "ExpressionStatement",
                  "src": "1261:34:2"
                }
              ]
            },
            "documentation": {
              "id": 713,
              "nodeType": "StructuredDocumentation",
              "src": "934:202:2",
              "text": "@notice Setting references for government and dream token contracts\n @param _govAddress The address of the government contract\n @param _tokenAddress The address of the token contract"
            },
            "id": 733,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 718,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 715,
                  "mutability": "mutable",
                  "name": "_govAddress",
                  "nameLocation": "1162:11:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 733,
                  "src": "1154:19:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 714,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1154:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 717,
                  "mutability": "mutable",
                  "name": "_tokenAddress",
                  "nameLocation": "1183:13:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 733,
                  "src": "1175:21:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 716,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1175:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1153:44:2"
            },
            "returnParameters": {
              "id": 719,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1198:0:2"
            },
            "scope": 784,
            "src": "1142:161:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 749,
              "nodeType": "Block",
              "src": "1450:90:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "id": 742,
                            "name": "government",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 694,
                            "src": "1481:10:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_DreamGovernment_$533",
                              "typeString": "contract DreamGovernment"
                            }
                          },
                          "id": 743,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "getLotteryAddress",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 532,
                          "src": "1481:28:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_pure$__$returns$_t_address_$",
                            "typeString": "function () pure external returns (address)"
                          }
                        },
                        "id": 744,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1481:30:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 745,
                          "name": "getLotteryAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 783,
                          "src": "1513:16:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                            "typeString": "function () view returns (uint256)"
                          }
                        },
                        "id": 746,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1513:18:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 739,
                        "name": "dreamToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "1461:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1479",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 741,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "transfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1428,
                      "src": "1461:19:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (address,uint256) external returns (bool)"
                      }
                    },
                    "id": 747,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1461:71:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 748,
                  "nodeType": "ExpressionStatement",
                  "src": "1461:71:2"
                }
              ]
            },
            "documentation": {
              "id": 734,
              "nodeType": "StructuredDocumentation",
              "src": "1315:72:2",
              "text": "@notice Sending voted proportion of the tax pool to lottery contract"
            },
            "functionSelector": "a90b0f47",
            "id": 750,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 737,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 736,
                  "name": "onlyGovernment",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 712,
                  "src": "1436:14:2"
                },
                "nodeType": "ModifierInvocation",
                "src": "1436:14:2"
              }
            ],
            "name": "collectTaxesForLottery",
            "nameLocation": "1402:22:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 735,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1424:2:2"
            },
            "returnParameters": {
              "id": 738,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1450:0:2"
            },
            "scope": 784,
            "src": "1393:147:2",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 764,
              "nodeType": "Block",
              "src": "1713:61:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 760,
                            "name": "this",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967268,
                            "src": "1760:4:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_TaxPool_$784",
                              "typeString": "contract TaxPool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_TaxPool_$784",
                              "typeString": "contract TaxPool"
                            }
                          ],
                          "id": 759,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1752:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_$",
                            "typeString": "type(address)"
                          },
                          "typeName": {
                            "id": 758,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1752:7:2",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 761,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1752:13:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 756,
                        "name": "dreamToken",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "1731:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IERC20_$1479",
                          "typeString": "contract IERC20"
                        }
                      },
                      "id": 757,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balanceOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1418,
                      "src": "1731:20:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 762,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1731:35:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 755,
                  "id": 763,
                  "nodeType": "Return",
                  "src": "1724:42:2"
                }
              ]
            },
            "documentation": {
              "id": 751,
              "nodeType": "StructuredDocumentation",
              "src": "1552:102:2",
              "text": "@notice Get current amount of DreamToken in tax pool \n @return current balance of tax pool"
            },
            "functionSelector": "09d655e9",
            "id": 765,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getTotalTaxes",
            "nameLocation": "1669:13:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 752,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1682:2:2"
            },
            "returnParameters": {
              "id": 755,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 754,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 765,
                  "src": "1705:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 753,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1705:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1704:9:2"
            },
            "scope": 784,
            "src": "1660:114:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 782,
              "nodeType": "Block",
              "src": "1967:85:2",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "hexValue": "3130303030",
                        "id": 779,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2038:5:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_10000_by_1",
                          "typeString": "int_const 10000"
                        },
                        "value": "10000"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_rational_10000_by_1",
                          "typeString": "int_const 10000"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "id": 774,
                                "name": "government",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 694,
                                "src": "2005:10:2",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_DreamGovernment_$533",
                                  "typeString": "contract DreamGovernment"
                                }
                              },
                              "id": 775,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "getLotteryRate",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 520,
                              "src": "2005:25:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                "typeString": "function () view external returns (uint8)"
                              }
                            },
                            "id": 776,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2005:27:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          ],
                          "expression": {
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 771,
                              "name": "getTotalTaxes",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 765,
                              "src": "1985:13:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                "typeString": "function () view returns (uint256)"
                              }
                            },
                            "id": 772,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1985:15:2",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 773,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1733,
                          "src": "1985:19:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1985:48:2",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 778,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "div",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1748,
                      "src": "1985:52:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                      }
                    },
                    "id": 780,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1985:59:2",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 770,
                  "id": 781,
                  "nodeType": "Return",
                  "src": "1978:66:2"
                }
              ]
            },
            "documentation": {
              "id": 766,
              "nodeType": "StructuredDocumentation",
              "src": "1786:119:2",
              "text": "@notice Calculating total amount of lottery with currently voted proportion\n @return current lottery amount"
            },
            "functionSelector": "a537e19d",
            "id": 783,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getLotteryAmount",
            "nameLocation": "1920:16:2",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 767,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1936:2:2"
            },
            "returnParameters": {
              "id": 770,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 769,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 783,
                  "src": "1959:7:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 768,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1959:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1958:9:2"
            },
            "scope": 784,
            "src": "1911:141:2",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 785,
        "src": "476:1579:2",
        "usedErrors": []
      }
    ],
    "src": "33:2022:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.5+commit.a4f2e591.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-06-14T16:44:13.988Z",
  "devdoc": {
    "author": "Lars Raschke",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_govAddress": "The address of the government contract",
          "_tokenAddress": "The address of the token contract"
        }
      },
      "getLotteryAmount()": {
        "returns": {
          "_0": "current lottery amount"
        }
      },
      "getTotalTaxes()": {
        "returns": {
          "_0": "current balance of tax pool"
        }
      }
    },
    "title": "Tax pool for Dream Government",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectTaxesForLottery()": {
        "notice": "Sending voted proportion of the tax pool to lottery contract"
      },
      "constructor": {
        "notice": "Setting references for government and dream token contracts"
      },
      "getLotteryAmount()": {
        "notice": "Calculating total amount of lottery with currently voted proportion"
      },
      "getTotalTaxes()": {
        "notice": "Get current amount of DreamToken in tax pool "
      }
    },
    "notice": "This pool collects all fees by a simple transfer on dream token. On the end of each government cycle the government sends an amount voted by the stakers to the lottery pool.",
    "version": 1
  }
}